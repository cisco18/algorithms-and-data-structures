package com.company;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class Operations {
    public String scan(){
        Scanner scanner = new Scanner(System.in);
        System.out.println("Podaj nazwe pliku");
        return scanner.nextLine();
    }
    public String printACommand(){
        Scanner scanner = new Scanner(System.in);
        System.out.println("\nPodaj binarny kod do rozszyfrowania\n");
        return scanner.nextLine();
    }

    public String getFileString(String fileName){
        try{


            String token1 = "";



            Scanner inFile1 = new Scanner(new File(fileName)).useDelimiter(",\\s*");

            List<Character> temps = new ArrayList<>();


            while (inFile1.hasNext()) {

                token1 = inFile1.next();

                for (int i = 0; i<token1.length();i++){
                    temps.add(token1.charAt(i));
                }

            }
            inFile1.close();
            StringBuilder stringBuilder = new StringBuilder();
            for (Character c : temps){
                stringBuilder.append(c);
            }
            return stringBuilder.toString();

        }catch (IOException e){
            e.printStackTrace();
        }
        return null;
    }
    public List<Character> readAndSaveFrequency(String fileName){
        try{

            String token1 = "";



            Scanner inFile1 = new Scanner(new File(fileName)).useDelimiter(",\\s*");

            List<Character> temps = new ArrayList<>();


            while (inFile1.hasNext()) {

                token1 = inFile1.next();

                for (int i = 0; i<token1.length();i++){
                    temps.add(token1.charAt(i));
                }

            }
            inFile1.close();
            for (Character c : temps){
                System.out.print(c);

            }

            return temps;

        }catch (IOException e){
            e.printStackTrace();
        }
        return null;
    }


    public void printCode(HuffmanNode root, String s)
    {
    if (root!=null) {
        // base case; if the left and right are null
        // then its a leaf node and we print
        // the code s generated by traversing the tree.
        if (root.left
                == null
                && root.right
                == null
        && Character.isLetter(root.character)
                || root.character==' '|| root.character=='.') {

            // c is the character in the node
            root.binaryCode = s;
            System.out.println(root.character + ":" + root.binaryCode);

            return;
        }

        // if we go to left then add "0" to the code.
        // if we go to the right add"1" to the code.

        // recursive calls for left and
        // right sub-tree of the generated tree.
        printCode(root.left, s + "0");
        printCode(root.right, s + "1");
    }

    }
    public HuffmanNode[] createAlphabetArray(){
        char[] alphabet = new char[]{'a', 'b', 'c', 'd', 'e', 'f', 'g','h', 'i', 'j', 'k', 'l', 'm', 'n','o', 'p','q','r', 's', 't', 'u','v','w','x','y','z',' ', '/','.'};
        HuffmanNode[] nodes = new HuffmanNode[29];
        for (int i =0;i<29;i++){
            nodes[i] = new HuffmanNode(alphabet[i]);
        }
        return nodes;
    }

    public HuffmanNode[] assignFrequences(List<Character> list, HuffmanNode[] nodes){
        for (HuffmanNode node: nodes){
            int i = 0;
            for (Character c: list){
                if (c.equals(node.getCharacter())){
                    i++;
                }
            }
            node.setFrequency(i);
        }
        return nodes;
    }
    public ArrayList<HuffmanNode> sortNodes(HuffmanNode[] nodes){
        ArrayList<HuffmanNode> list = new ArrayList<>(Arrays.asList(nodes));
        list.sort(new HuffmanComparator());
        return list;
    }

}
